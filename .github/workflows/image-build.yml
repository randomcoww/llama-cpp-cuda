# References:
# https://some-natalie.dev/blog/kaniko-in-arc/
# https://dev.to/ipo/using-kaniko-to-build-and-publish-container-image-with-github-action-on-github-self-hosted-runners-d5m

name: Image Build
on:
  workflow_dispatch:
  schedule:
  - cron: "0 23 1 * *"
  push:
    paths-ignore:
    - .github/**
    - README.md
    branches:
    - master
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

env:
  CUDA_VERSION: 12.9.1

jobs:
  tag:
    runs-on: arc-runner-${{ github.event.repository.name }}
    container:
      image: docker.io/library/busybox:latest
    outputs:
      timestamp: ${{ steps.tag.outputs.TAG }}
    steps:
    - name: Set tag
      id: tag
      run: |
        echo TAG=$(date -u +'%Y%m%d.%H%M') | tee -a "$GITHUB_OUTPUT"
  build:
    needs:
      - tag
    runs-on: arc-runner-${{ github.event.repository.name }}
    container:
      image: ghcr.io/randomcoww/kaniko:debug
    permissions:
      contents: read
    steps:
    - name: Build and release container
      run: |
        mkdir -p $DOCKER_CONFIG
        cat > $DOCKER_CONFIG/config.json <<EOF
        {
          "auths": {
            "ghcr.io": {
              "auth": "$(echo -n ${{ github.actor }}:${{ secrets.GITHUB_TOKEN }} | base64 -w0)"
            }
          }
        }
        EOF
        echo -e "$INTERNAL_CA_CERT" > $DOCKER_CONFIG/internal.crt

        /kaniko/executor \
          --dockerfile="./.devops/cuda.Dockerfile" \
          --context="git://github.com/ggml-org/llama.cpp#master" \
          --destination="$INTERNAL_REGISTRY/${{ github.repository }}:v${{needs.tag.outputs.timestamp}}-$CUDA_VERSION" \
          --registry-certificate=$INTERNAL_REGISTRY=$DOCKER_CONFIG/internal.crt \
          --build-arg CUDA_VERSION=$CUDA_VERSION \
          --skip-unused-stages \
          --target server \
          --push-retry 3
  cleanup:
    needs:
      - build
    env:
      TAGS_KEEP: 4
    runs-on: arc-runner-${{ github.event.repository.name }}
    container:
      image: docker.io/regclient/regctl:alpine
    steps:
    - name: Remove old tags
      run: |
        set -e

        regctl registry set $INTERNAL_REGISTRY --cacert "$INTERNAL_CA_CERT"
        tags=$(regctl tag ls $INTERNAL_REGISTRY/${{ github.repository }} | grep -v latest | sort -r)
        set -- $tags

        i=0
        while [ "$i" -lt "$TAGS_KEEP" ]; do
          shift
          i=$((i + 1))
        done

        for tag in $@; do
          echo "Delete $tag"
          regctl tag delete --ignore-missing $INTERNAL_REGISTRY/${{ github.repository }}:$tag
        done
  build-llama-swap:
    needs:
      - tag
      - build
    runs-on: arc-runner-${{ github.event.repository.name }}
    container:
      image: ghcr.io/randomcoww/kaniko:debug
    permissions:
      contents: read
    steps:
    - name: Build and release container
      run: |
        mkdir -p $DOCKER_CONFIG
        cat > $DOCKER_CONFIG/config.json <<EOF
        {
          "auths": {
            "ghcr.io": {
              "auth": "$(echo -n ${{ github.actor }}:${{ secrets.GITHUB_TOKEN }} | base64 -w0)"
            }
          }
        }
        EOF
        echo -e "$INTERNAL_CA_CERT" > $DOCKER_CONFIG/internal.crt

        /kaniko/executor \
          --dockerfile="llama-swap.Containerfile" \
          --context="${{ github.repositoryUrl }}#${{ github.ref }}#${{ github.sha }}" \
          --destination="$INTERNAL_REGISTRY/${{ github.repository }}-llama-swap:v${{needs.tag.outputs.timestamp}}-$CUDA_VERSION" \
          --registry-certificate=$INTERNAL_REGISTRY=$DOCKER_CONFIG/internal.crt \
          --build-arg BASE_IMAGE=$INTERNAL_REGISTRY/${{ github.repository }}:v${{needs.tag.outputs.timestamp}}-$CUDA_VERSION \
          --push-retry 3
  cleanup-llama-swap:
    needs:
      - build-llama-swap
    env:
      TAGS_KEEP: 4
    runs-on: arc-runner-${{ github.event.repository.name }}
    container:
      image: docker.io/regclient/regctl:alpine
    steps:
    - name: Remove old tags
      run: |
        set -e

        regctl registry set $INTERNAL_REGISTRY --cacert "$INTERNAL_CA_CERT"
        tags=$(regctl tag ls $INTERNAL_REGISTRY/${{ github.repository }}-llama-swap | grep -v latest | sort -r)
        set -- $tags

        i=0
        while [ "$i" -lt "$TAGS_KEEP" ]; do
          shift
          i=$((i + 1))
        done

        for tag in $@; do
          echo "Delete $tag"
          regctl tag delete --ignore-missing $INTERNAL_REGISTRY/${{ github.repository }}-llama-swap:$tag
        done